// Code generated by "enumgen"; DO NOT EDIT.

package cell

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _StateValues = []State{0, 1}

// StateN is the highest valid value
// for type State, plus one.
const StateN State = 2

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _StateNoOp() {
	var x [1]struct{}
	_ = x[Dead-(0)]
	_ = x[Life-(1)]
}

var _StateNameToValueMap = map[string]State{
	`Dead`: 0,
	`dead`: 0,
	`Life`: 1,
	`life`: 1,
}

var _StateDescMap = map[State]string{
	0: ``,
	1: ``,
}

var _StateMap = map[State]string{
	0: `Dead`,
	1: `Life`,
}

// String returns the string representation
// of this State value.
func (i State) String() string {
	if str, ok := _StateMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the State value from its
// string representation, and returns an
// error if the string is invalid.
func (i *State) SetString(s string) error {
	if val, ok := _StateNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _StateNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type State")
}

// Int64 returns the State value as an int64.
func (i State) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the State value from an int64.
func (i *State) SetInt64(in int64) {
	*i = State(in)
}

// Desc returns the description of the State value.
func (i State) Desc() string {
	if str, ok := _StateDescMap[i]; ok {
		return str
	}
	return i.String()
}

// StateValues returns all possible values
// for the type State.
func StateValues() []State {
	return _StateValues
}

// Values returns all possible values
// for the type State.
func (i State) Values() []enums.Enum {
	res := make([]enums.Enum, len(_StateValues))
	for i, d := range _StateValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type State.
func (i State) IsValid() bool {
	_, ok := _StateMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *State) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
